version: '3.9'

services:
  # API Backend
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: vocaliq-api
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql://vocaliq:vocaliq@postgres:5432/vocaliq
      - REDIS_URL=redis://redis:6379
      - WEAVIATE_URL=http://weaviate:8080
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - ./storage:/app/storage
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - vocaliq-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: vocaliq-frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - vocaliq-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: vocaliq-postgres
    environment:
      - POSTGRES_USER=vocaliq
      - POSTGRES_PASSWORD=vocaliq
      - POSTGRES_DB=vocaliq
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - vocaliq-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vocaliq"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: vocaliq-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    restart: unless-stopped
    networks:
      - vocaliq-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.22.4
    container_name: vocaliq-weaviate
    ports:
      - "8080:8080"
    environment:
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - QUERY_DEFAULTS_LIMIT=25
      - DEFAULT_VECTORIZER_MODULE=text2vec-openai
      - ENABLE_MODULES=text2vec-openai
    volumes:
      - weaviate-data:/var/lib/weaviate
    restart: unless-stopped
    networks:
      - vocaliq-network

  # Monitoring Stack (optional profile)
  prometheus:
    image: prom/prometheus:latest
    container_name: vocaliq-prometheus
    profiles: ["monitoring"]
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - vocaliq-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: vocaliq-grafana
    profiles: ["monitoring"]
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - vocaliq-network
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  weaviate-data:
  prometheus-data:
  grafana-data:

networks:
  vocaliq-network:
    driver: bridge